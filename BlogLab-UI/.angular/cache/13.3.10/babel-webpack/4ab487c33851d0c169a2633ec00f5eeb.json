{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/account.service\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(toastr, router, accountService) {\n      this.toastr = toastr;\n      this.router = router;\n      this.accountService = accountService;\n    }\n\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(error => {\n        if (error) {\n          switch (error.status) {\n            case 400:\n              this.handle400Error(error);\n              break;\n\n            case 401:\n              this.handle401Error(error);\n              break;\n\n            case 500:\n              this.handle500Error(error);\n              break;\n\n            default:\n              this.handleUnexpectedError(error);\n              break;\n          }\n        }\n\n        return throwError(error);\n      }));\n    }\n\n    handle400Error(error) {\n      var _a, _b;\n\n      if (!!error.error && Array.isArray(error.error)) {\n        let errorMessage = '';\n\n        for (const key in error.error) {\n          if (error.error[key]) {\n            const errorElement = error.error(key);\n            errorMessage = `${errorMessage}${errorElement.code} - ${errorElement.description}\\n`;\n          }\n        }\n\n        this.toastr.error(errorMessage, error.statusText);\n        console.log(error.error);\n      } else if (!!((_b = (_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b.Content) && typeof error.error.errors.Content == 'object') {\n        let errorObject = error.error.errors.Content;\n        let errorMessage = '';\n\n        for (const key in errorObject) {\n          const errorElement = errorObject[key];\n          errorMessage = `${errorMessage}${errorElement}\\n`;\n        }\n\n        this.toastr.error(errorMessage, error.statusCode);\n        console.log(error.error);\n      } else if (!!error.error) {\n        let errorMessage = typeof error.error === 'string' ? error.error : 'There was a validation error.';\n        this.toastr.error(errorMessage, error.statusCode);\n        console.log(error.error);\n      } else {\n        this.toastr.error(error.statusCode, error.status);\n        console.log(error);\n      }\n    }\n\n    handle401Error(error) {\n      let errorMessage = 'Please login to your account';\n      this.accountService.logout();\n      this.toastr.error(errorMessage, error.statusText);\n      this.router.navigate(['/login']);\n    }\n\n    handle500Error(error) {\n      this.toastr.error('Please contact the administrator, An error happend in the server.');\n      console.log(error);\n    }\n\n    handleUnexpectedError(error) {\n      this.toastr.error('Something unexpected happened.');\n      console.log(error);\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.ToastrService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AccountService));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}